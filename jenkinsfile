pipeline {
    agent any

    environment {
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64"
        MAVEN_HOME = "/usr/share/maven"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    git(credentialsId: '88b92039-366f-4db0-910b-f0f4187c7492', url: 'https://github.com/GUMMASAISINDHU/demo-java11.git')
                    // Saving remote branches to branch.txt
                    sh 'git branch -r | awk \'{print $1}\' > branch.txt'
                }
            }
        }

        stage('Choose Branch') {
            steps {
                script {
                    def branches = readFile('branch.txt')
                    // Ensure branch.txt has valid content
                    if (branches?.trim()) {
                        env.BRANCH_NAME = input message: 'Please choose the branch to build',
                                                ok: 'Validate!',
                                                parameters: [choice(name: 'Branch', choices: branches, description: 'Branch to build')]
                    } else {
                        error("No branches found in branch.txt")
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "refs/heads/${env.BRANCH_NAME}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/GUMMASAISINDHU/demo-java11.git',
                        credentialsId: '88b92039-366f-4db0-910b-f0f4187c7492'
                    ]]
                ])
            }
        }

        stage('Build and Test') {
            steps {
                echo "Building and testing the project..."
                sh "${MAVEN_HOME}/bin/mvn clean install"
                sh "${MAVEN_HOME}/bin/mvn test"
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying the project..."
                sh "${MAVEN_HOME}/bin/mvn deploy"
            }
        }
    }

    post {
        always {
            junit 'target/surefire-reports/**/*.xml'
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
        }

        success {
            echo 'Pipeline completed successfully!'
            // Consider adding more success handling (e.g., notifications)
        }

        failure {
            echo 'Pipeline failed.'
            // Consider adding more failure handling (e.g., notifications)
        }
    }
}
