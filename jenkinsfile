pipeline {
    agent any

    environment {
        // Define environment variables
        JAVA_HOME = "/usr/lib/jvm/java-11-openjdk-amd64"  // Path to Java 11
        MAVEN_HOME = "/usr/share/maven" // Path to Maven
    }

    stages {
        stage('checkout scm') {
            steps {
                script {
                    git credentialsId: '88b92039-366f-4db0-910b-f0f4187c7492', url: 'https://github.com/GUMMASAISINDHU/demo-java11.git'
                    sh 'git branch -r | awk \'{print $1}\' ORS=\'\\n\' >>branch.txt'
                }
            }
        }
        stage('get build Params User Input') {
            steps{
                script{
                    liste = readFile 'branch.txt'
                    echo "please click on the link here to chose the branch to build"
                    env.BRANCH_SCOPE = input message: 'Please choose the branch to build ', ok: 'Validate!',
                            parameters: [choice(name: 'BRANCH_NAME', choices: "${liste}", description: 'Branch to build?')]
                }
            }
        } 

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                // Checkout the selected branch
                checkout([$class: 'GitSCM', branches: [[name: "refs/heads/${params.BRANCH}"]],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [],
                          userRemoteConfigs: [[url: 'https://your-repo-url.git']]])
            }
        }

        stage('Build and Test') {
            steps {
                echo "Building and testing the project for environment: ${params.ENVIRONMENT}..."
                sh "${MAVEN_HOME}/bin/mvn clean install"
                sh "${MAVEN_HOME}/bin/mvn test"
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying the project to ${params.ENVIRONMENT} environment..."
                // Add your deployment commands here. For example:
                sh "${MAVEN_HOME}/bin/mvn deploy -P${params.ENVIRONMENT}"
            }
        }
    }

    post {
        always {
            // This block runs at the end of the pipeline regardless of the outcome
            // Collect test reports (if tests were run)
            junit 'target/surefire-reports/**/*.xml' // Collect and report test results

            // Archive artifacts (if needed)
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
        }

        success {
            echo 'Pipeline completed successfully!'
        }

        failure {
            echo 'Pipeline failed.'
        }
    }
}
